generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model smtp_configuration {
  idsmtp_configuration Int       @id @default(autoincrement())
  host                 String?   @db.Text
  port                 String?   @db.Text
  secure               String?   @db.Text
  user                 String?   @db.Text
  password             String?   @db.Text
  status               Int?
  created_at           DateTime? @default(now()) @db.DateTime(0)
  updated_at           DateTime? @default(now()) @db.DateTime(0)
}

model mails {
  idmails       Int             @id @default(autoincrement())
  from          String?         @db.Text
  to            String?         @db.Text
  subject       String?         @db.Text
  html          String?         @db.Text
  status        Int?
  created_at    DateTime?       @default(now()) @db.DateTime(0)
  updated_At    DateTime?       @default(now()) @db.DateTime(0)
  mail_schedule mail_schedule[]
}

model mail_schedule {
  idmail_schedule Int       @id @default(autoincrement())
  day             String?   @db.Text
  time            String?   @db.Text
  status          Int?
  created_at      DateTime? @default(now()) @db.DateTime(0)
  updated_at      DateTime? @default(now()) @db.DateTime(0)
  idmails         Int
  mails           mails     @relation(fields: [idmails], references: [idmails], onDelete: NoAction, onUpdate: NoAction, map: "FK_mail_schedule_mails")

  @@index([idmails], map: "FK_mail_schedule_mails")
}

model anios {
  idanios Int       @id @default(autoincrement())
  nombre  String?   @db.VarChar(45)
  status  Int?
  modelos modelos[]
}

model modelos {
  idmodelos       Int               @id @default(autoincrement())
  idanios         Int?
  nombre          String?           @db.Text
  frase           String?           @db.Text
  imagen          String?           @db.Text
  url             String?           @db.VarChar(45)
  pdf             String?           @db.VarChar(45)
  status          Int?
  orden           Int?
  colores_modelos colores_modelos[]
  anios           anios?            @relation(fields: [idanios], references: [idanios], onDelete: NoAction, onUpdate: NoAction, map: "FK_MODELO_ANIOS")
  versiones       versiones[]

  @@index([idanios], map: "FK_MODELO_ANIOS_idx")
}

model versiones {
  idversiones Int      @id @default(autoincrement())
  idmodelos   Int?
  nombre      String?  @db.Text
  precio      Decimal? @db.Decimal(10, 2)
  status      Int?
  modelos     modelos? @relation(fields: [idmodelos], references: [idmodelos], onDelete: NoAction, onUpdate: NoAction, map: "FK_VERSIONES_MODELOS")

  @@index([idmodelos], map: "FK_VERSIONES_MODELOS_idx")
}

model colores {
  idcolores       Int               @id @default(autoincrement())
  nombre          String?           @db.Text
  idstatus        Int?
  colores_modelos colores_modelos[]
}

model colores_modelos {
  idcolores_modelos Int      @id @default(autoincrement())
  idcolores         Int?
  idmodelos         Int?
  url               String?  @db.Text
  status            Int?
  colores           colores? @relation(fields: [idcolores], references: [idcolores], onDelete: NoAction, onUpdate: NoAction, map: "FK_COLORES_MODELOS_COLORES")
  modelos           modelos? @relation(fields: [idmodelos], references: [idmodelos], onDelete: NoAction, onUpdate: NoAction, map: "FK_COLORES_MODELOS_MODELOS")

  @@index([idcolores], map: "FK_COLORES_MODELOS_COLORES_idx")
  @@index([idmodelos], map: "FK_COLORES_MODELOS_MODELOS_idx")
}

model promociones {
  idpromociones Int       @id @default(autoincrement())
  urlImagen     String?   @db.Text
  urlDestino    String?   @db.Text
  fechaInicio   DateTime? @db.DateTime(0)
  fechaFin      DateTime? @db.DateTime(0)
  created_at    DateTime? @default(now()) @db.DateTime(0)
  updatet_at    DateTime? @default(now()) @db.DateTime(0)
}
